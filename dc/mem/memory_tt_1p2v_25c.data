/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2023  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Single Port Register File Generator
 *           			IBM CMRF8SF-LPVT Process
 *      version:		2008Q3V1
 *      comment:		
 *      configuration:	 -instname memory -words 128 -bits 8 -frequency 100 -ring_width 2.0 -mux 2 -write_mask off -wp_size 8 -top_layer "m6-m8_m4" -power_type rings -horiz met1 -vert met2 -cust_comment "" -bus_notation on -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -drive 4 -asvm on -corners ff_1p32v_m55c,ff_1p65v_125c,tt_1p2v_25c,ss_1p08v_m55c
 *
 *      Synopsys model for Synchronous Single-Port Register File
 *
 *      Library Name:   aci
 *      Instance Name:  memory
 *      Words:          128
 *      Word Width:     8
 *      Mux:            2
 *      Process:        tt_1p2v_25c
 *
 *      Creation Date:  2023-11-05 21:20:03Z
 *      Version:        2008Q3V1
 *
 *      Verified With: Synopsys Primetime
 *
 *      Modeling Assumptions: This library contains a black box description
 *          for a memory element.  At the library level, a
 *          default_max_transition constraint is set to the maximum
 *          characterized input slew.  Each output has a max_capacitance
 *          constraint set to the highest characterized output load.
 *          Different modes are defined in order to disable false path
 *          during the specific mode activation when doing static timing analysis. 
 *
 *
 *      Modeling Limitations: This stamp does not include power information.
 *          Due to limitations of the stamp modeling, some data reduction was
 *          necessary.  When reducing data, minimum values were chosen for the
 *          fast case corner and maximum values were used for the typical and
 *          best case corners.  It is recommended that critical timing and
 *          setup and hold times be checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */

MODELDATA
OPERATING_CONDITION "tt_1p2v_25c";
DESIGN              "memory";

CELLDATA
area                   : 13722.090;
default_max_transition : 1.500;
ENDCELLDATA

PORTDATA
Q[7:0] : MAXCAP(0.650);
A[6:0] : CAP(0.013);
D[7:0] : CAP(0.003);
CLK : CAP(0.057), MAXTRANS(1.500);
WEN : CAP(0.018);
CEN : CAP(0.008);
ENDPORTDATA

TIMINGDATA
GLOBAL
        lu_table_template(memory_bist_mux_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(memory_mux_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(memory_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(memory_bist_mux_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(memory_mem_out_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(memory_clk_setup_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(memory_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
ENDGLOBAL
ARCDATA
setup_a_A:
                        rise_constraint(memory_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.776, 0.811, 0.855, 0.943, 1.207, 1.646, 2.086", \
                          "0.744, 0.779, 0.823, 0.911, 1.175, 1.614, 2.053", \
                          "0.704, 0.739, 0.783, 0.871, 1.135, 1.574, 2.013", \
                          "0.624, 0.659, 0.703, 0.791, 1.054, 1.494, 1.933", \
                          "0.383, 0.418, 0.462, 0.550, 0.813, 1.253, 1.692", \
                          "-0.019, 0.017, 0.060, 0.148, 0.412, 0.851, 1.291", \
                          "-0.420, -0.385, -0.341, -0.253, 0.011, 0.450, 0.889" \
                        )
                        }
                        fall_constraint(memory_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.254, 0.287, 0.327, 0.409, 0.654, 1.061, 1.469", \
                          "0.222, 0.254, 0.295, 0.377, 0.621, 1.029, 1.437", \
                          "0.182, 0.214, 0.255, 0.337, 0.581, 0.989, 1.397", \
                          "0.101, 0.134, 0.175, 0.256, 0.501, 0.909, 1.317", \
                          "-0.140, -0.107, -0.066, 0.015, 0.260, 0.668, 1.076", \
                          "-0.541, -0.508, -0.468, -0.386, -0.141, 0.266, 0.674", \
                          "-0.942, -0.910, -0.869, -0.787, -0.543, -0.135, 0.273" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_a_A:
                        rise_constraint(memory_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.010, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.050, 0.015, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.130, 0.095, 0.051, 0.000, 0.000, 0.000, 0.000", \
                          "0.371, 0.336, 0.292, 0.204, 0.000, 0.000, 0.000", \
                          "0.773, 0.737, 0.693, 0.606, 0.342, 0.000, 0.000", \
                          "1.174, 1.139, 1.095, 1.007, 0.743, 0.304, 0.000" \
                        )
                        }
                        fall_constraint(memory_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.011, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.043, 0.011, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.083, 0.051, 0.010, 0.000, 0.000, 0.000, 0.000", \
                          "0.164, 0.131, 0.090, 0.009, 0.000, 0.000, 0.000", \
                          "0.405, 0.372, 0.331, 0.250, 0.005, 0.000, 0.000", \
                          "0.806, 0.773, 0.733, 0.651, 0.406, 0.000, 0.000", \
                          "1.207, 1.175, 1.134, 1.052, 0.808, 0.400, 0.000" \
                        )
                        }
ENDARCDATA
ARCDATA
setup_d_A:
                        rise_constraint(memory_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.305, 0.338, 0.379, 0.462, 0.711, 1.127, 1.542", \
                          "0.272, 0.306, 0.347, 0.430, 0.679, 1.095, 1.510", \
                          "0.232, 0.266, 0.307, 0.390, 0.639, 1.054, 1.470", \
                          "0.152, 0.185, 0.227, 0.310, 0.559, 0.974, 1.389", \
                          "-0.089, -0.056, -0.014, 0.069, 0.318, 0.733, 1.149", \
                          "-0.490, -0.457, -0.416, -0.332, -0.083, 0.332, 0.747", \
                          "-0.892, -0.859, -0.817, -0.734, -0.485, -0.070, 0.346" \
                        )
                        }
                        fall_constraint(memory_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.401, 0.433, 0.474, 0.555, 0.799, 1.206, 1.613", \
                          "0.369, 0.401, 0.442, 0.523, 0.767, 1.174, 1.581", \
                          "0.329, 0.361, 0.402, 0.483, 0.727, 1.134, 1.540", \
                          "0.248, 0.281, 0.321, 0.403, 0.647, 1.053, 1.460", \
                          "0.007, 0.040, 0.081, 0.162, 0.406, 0.813, 1.219", \
                          "-0.394, -0.361, -0.321, -0.239, 0.005, 0.411, 0.818", \
                          "-0.795, -0.763, -0.722, -0.641, -0.397, 0.010, 0.416" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_d_A:
                        rise_constraint(memory_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.028, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.068, 0.034, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.148, 0.115, 0.073, 0.000, 0.000, 0.000, 0.000", \
                          "0.389, 0.356, 0.314, 0.231, 0.000, 0.000, 0.000", \
                          "0.790, 0.757, 0.716, 0.632, 0.383, 0.000, 0.000", \
                          "1.192, 1.158, 1.117, 1.034, 0.785, 0.370, 0.000" \
                        )
                        }
                        fall_constraint(memory_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.219, 0.186, 0.146, 0.064, 0.000, 0.000, 0.000", \
                          "0.620, 0.588, 0.547, 0.466, 0.222, 0.000, 0.000", \
                          "1.022, 0.989, 0.949, 0.867, 0.623, 0.217, 0.000" \
                        )
                        }
ENDARCDATA
ARCDATA
setup_cen_A:
                        rise_constraint(memory_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.560, 0.590, 0.629, 0.706, 0.936, 1.321, 1.705", \
                          "0.528, 0.558, 0.597, 0.674, 0.904, 1.289, 1.673", \
                          "0.487, 0.518, 0.557, 0.634, 0.864, 1.248, 1.633", \
                          "0.407, 0.438, 0.476, 0.553, 0.784, 1.168, 1.553", \
                          "0.166, 0.197, 0.235, 0.312, 0.543, 0.927, 1.312", \
                          "-0.235, -0.204, -0.166, -0.089, 0.142, 0.526, 0.910", \
                          "-0.637, -0.606, -0.567, -0.491, -0.260, 0.124, 0.509" \
                        )
                        }
                        fall_constraint(memory_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.642, 0.675, 0.717, 0.799, 1.048, 1.461, 1.875", \
                          "0.610, 0.643, 0.685, 0.767, 1.015, 1.429, 1.842", \
                          "0.570, 0.603, 0.645, 0.727, 0.975, 1.389, 1.802", \
                          "0.490, 0.523, 0.564, 0.647, 0.895, 1.309, 1.722", \
                          "0.249, 0.282, 0.323, 0.406, 0.654, 1.068, 1.481", \
                          "-0.153, -0.119, -0.078, 0.005, 0.253, 0.666, 1.080", \
                          "-0.554, -0.521, -0.480, -0.397, -0.149, 0.265, 0.678" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_cen_A:
                        rise_constraint(memory_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.058, 0.028, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.460, 0.429, 0.391, 0.314, 0.083, 0.000, 0.000", \
                          "0.861, 0.830, 0.792, 0.715, 0.485, 0.100, 0.000" \
                        )
                        }
                        fall_constraint(memory_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.370, 0.337, 0.295, 0.213, 0.000, 0.000, 0.000", \
                          "0.771, 0.738, 0.697, 0.614, 0.366, 0.000, 0.000" \
                        )
                        }
ENDARCDATA
ARCDATA
setup_wen_A:
                        rise_constraint(memory_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.469, 0.502, 0.543, 0.624, 0.869, 1.277, 1.685", \
                          "0.437, 0.470, 0.511, 0.592, 0.837, 1.245, 1.653", \
                          "0.397, 0.430, 0.471, 0.552, 0.797, 1.205, 1.612", \
                          "0.317, 0.349, 0.390, 0.472, 0.716, 1.124, 1.532", \
                          "0.076, 0.109, 0.149, 0.231, 0.476, 0.883, 1.291", \
                          "-0.326, -0.293, -0.252, -0.171, 0.074, 0.482, 0.890", \
                          "-0.727, -0.694, -0.654, -0.572, -0.327, 0.081, 0.488" \
                        )
                        }
                        fall_constraint(memory_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.558, 0.586, 0.621, 0.691, 0.901, 1.250, 1.600", \
                          "0.526, 0.554, 0.589, 0.659, 0.868, 1.218, 1.568", \
                          "0.486, 0.514, 0.548, 0.618, 0.828, 1.178, 1.528", \
                          "0.405, 0.433, 0.468, 0.538, 0.748, 1.098, 1.448", \
                          "0.164, 0.192, 0.227, 0.297, 0.507, 0.857, 1.207", \
                          "-0.237, -0.209, -0.174, -0.104, 0.106, 0.455, 0.805", \
                          "-0.639, -0.611, -0.576, -0.506, -0.296, 0.054, 0.404" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_wen_A:
                        rise_constraint(memory_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.068, 0.035, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.309, 0.276, 0.235, 0.154, 0.000, 0.000, 0.000", \
                          "0.710, 0.678, 0.637, 0.555, 0.311, 0.000, 0.000", \
                          "1.112, 1.079, 1.038, 0.957, 0.712, 0.304, 0.000" \
                        )
                        }
                        fall_constraint(memory_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.057, 0.029, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.298, 0.270, 0.235, 0.165, 0.000, 0.000, 0.000", \
                          "0.699, 0.671, 0.636, 0.566, 0.356, 0.007, 0.000", \
                          "1.101, 1.073, 1.038, 0.968, 0.758, 0.408, 0.058" \
                        )
                        }
ENDARCDATA


ARCDATA
period_clk_0_A:
                        rise_constraint(scalar) {
                                values ("3.111")
                        }
                        fall_constraint(scalar) {
                                values ("3.111")
                        }
ENDARCDATA
ARCDATA
pulsewidth_clk_h_0_A:
                        rise_constraint(scalar) {
                                values ("0.355")
                        }
                        fall_constraint(scalar) {
                                values ("0.355")
                        }
ENDARCDATA
ARCDATA
pulsewidth_clk_l_0_A:
                        rise_constraint(scalar) {
                                values ("0.585")
                        }
                        fall_constraint(scalar) {
                                values ("0.585")
                        }
ENDARCDATA
ARCDATA
dly_clk_q_0_A:
                        cell_rise(memory_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ( \
                          "1.621, 1.642, 1.664, 1.719, 1.860, 2.089, 2.329", \
                          "1.653, 1.675, 1.696, 1.751, 1.892, 2.121, 2.361", \
                          "1.693, 1.715, 1.736, 1.791, 1.933, 2.161, 2.401", \
                          "1.773, 1.795, 1.817, 1.871, 2.013, 2.242, 2.481", \
                          "2.014, 2.036, 2.058, 2.112, 2.254, 2.483, 2.722", \
                          "2.416, 2.437, 2.459, 2.514, 2.655, 2.884, 3.124", \
                          "2.817, 2.839, 2.861, 2.915, 3.057, 3.286, 3.525" \
                        )
                        }
                        rise_transition(memory_mem_out_slew_template) {
                        index_1 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ("0.050, 0.102, 0.155, 0.285, 0.623, 1.170, 1.743")
                        }
                        cell_fall(memory_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ( \
                          "1.621, 1.642, 1.664, 1.719, 1.860, 2.089, 2.329", \
                          "1.653, 1.675, 1.696, 1.751, 1.892, 2.121, 2.361", \
                          "1.693, 1.715, 1.736, 1.791, 1.933, 2.161, 2.401", \
                          "1.773, 1.795, 1.817, 1.871, 2.013, 2.242, 2.481", \
                          "2.014, 2.036, 2.058, 2.112, 2.254, 2.483, 2.722", \
                          "2.416, 2.437, 2.459, 2.514, 2.655, 2.884, 3.124", \
                          "2.817, 2.839, 2.861, 2.915, 3.057, 3.286, 3.525" \
                        )
                        }
                        fall_transition(memory_mem_out_slew_template) {
                        index_1 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ("0.055, 0.118, 0.181, 0.339, 0.749, 1.412, 2.107")
                        }
ENDARCDATA
ENDTIMINGDATA
ENDMODELDATA
